<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

    <bean id="authenticationServiceBean" class="org.iana.rzm.facade.auth.AuthenticationServiceBean">
        <constructor-arg>
            <map>
                <entry key="org.iana.rzm.facade.auth.PasswordAuth" value-ref="passwordAuthenticator"/>
                <entry key="org.iana.rzm.facade.auth.SecurIDAuth" value-ref="securIDAuthenticator"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id="passwordAuthenticator" class="org.iana.rzm.facade.auth.PasswordAuthenticator">
        <constructor-arg>
            <ref bean="userManager"/>
        </constructor-arg>
    </bean>

    <bean id="securIDAuthenticator" class="org.iana.rzm.facade.auth.SecurIDAuthenticator">
        <constructor-arg>
            <ref bean="userManager"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="securID"/>
        </constructor-arg>
    </bean>

    <bean id="userManager" class="org.iana.rzm.facade.accuracy.TestUserManager"/>

    <bean id="securID" class="org.iana.rzm.facade.accuracy.TestSecurIDService"/>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="configLocation">
            <value>hibernate-facade-common.cfg.xml</value>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>

    <bean id="transactionAttribute"
          class="org.springframework.transaction.interceptor.DefaultTransactionAttribute">
        <property name="propagationBehaviorName">
            <value>PROPAGATION_REQUIRED</value>
        </property>
        <property name="isolationLevelName">
            <value>ISOLATION_READ_COMMITTED</value>
        </property>
    </bean>

    <bean id="transactionAttributeSource"
          class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">
        <property name="transactionAttribute">
            <ref bean="transactionAttribute"/>
        </property>
    </bean>

    <bean id="notificationDAO" class="org.iana.dao.hibernate.HibernateDAO">
        <constructor-arg value="org.iana.notifications.PNotification" type="java.lang.Class"/>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>

    <bean id="userDAO" class="org.iana.rzm.user.dao.HibernateUserDAO">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>

    <bean id="testNotificationSender" class="org.iana.rzm.trans.FakeNotificationSender">
        <constructor-arg ref="notificationDAO"/>
    </bean>

    <bean id="passwordChangeService" class="org.iana.rzm.facade.passwd.PasswordChangeServiceBean">
        <constructor-arg ref="userManager"/>
        <constructor-arg ref="testNotificationSender"/>
        <constructor-arg>
            <bean class="org.iana.notifications.producers.defaults.SinglePerTemplateProducer">
                <constructor-arg ref="templateFactory"/>
                <constructor-arg>
                    <bean class="org.iana.notifications.producers.defaults.DefaultAddresseeProducer"/>
                </constructor-arg>
                <constructor-arg value="password-change"/>
                <constructor-arg>
                    <bean class="org.iana.notifications.producers.defaults.DefaultDataProducer"/>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="templateFactory" class="org.iana.notifications.template.factory.DefaultTemplateFactory">
        <constructor-arg index="0">
            <bean class="org.iana.notifications.template.def.XMLTemplateDefLoader">
                <constructor-arg value="iana-templates.properties"/>
                <constructor-arg value="templates.xml"/>
            </bean>
        </constructor-arg>
        <constructor-arg index="1">
            <bean class="org.iana.notifications.template.simple.DefaultStringTemplateAlgorithm"/>
        </constructor-arg>
    </bean>

    <!--  Config DAO -->

    <bean id="parameterManager" class="org.iana.config.impl.ParameterManagerImpl">
        <constructor-arg>
            <ref bean="hibernateConfigDAO"/>
        </constructor-arg>
    </bean>

    <bean id="hibernateConfigDAO" class="org.iana.config.impl.HibernateConfigDAO">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
    </bean>

    <aop:config>
        <aop:pointcut id="transactionalOperation"
                      expression="execution(public * org.iana.rzm.facade.services.AbstractRZMStatefulService.*(..)) ||
                                  execution(public * org.iana.rzm.facade.passwd.PasswordChangeServiceBean.*(..)) ||
                                  execution(public * org.iana.rzm.user.UserManagerBean.*(..)) ||
                                  execution(public * org.iana.rzm.user.RoleManagerBean.*(..)) ||
                                  execution(public * org.iana.dao.hibernate.HibernateDAO.*(..)) ||
                                  execution(public * org.iana.config.impl.HibernateConfigDAO.*(..)) ||
                                  execution(public * org.iana.config.impl.ParameterManagerImpl.*(..))"/>
        <aop:advisor advice-ref="txAdvice"
                     pointcut-ref="transactionalOperation"
                     order="1"/>
        <aop:aspect id="hibernateExceptionAspect" ref="hibernateExceptionAdvisor">
            <aop:pointcut id="hibernateExceptionOperation"
                          expression="execution(public * org.iana.rzm.facade.services.AbstractRZMStatefulService.*(..)) ||
                                      execution(public * org.iana.rzm.facade.passwd.PasswordChangeServiceBean.*(..))"/>
            <aop:around method="proceed" pointcut-ref="hibernateExceptionOperation"/>
        </aop:aspect>
    </aop:config>

    <!-- advisors -->

    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="get*" read-only="true"
                       rollback-for="org.iana.rzm.facade.auth.AccessDeniedException,
                                     org.iana.rzm.facade.auth.AuthenticationException,
                                     org.iana.rzm.facade.auth.AuthenticationFailedException,
                                     org.iana.rzm.facade.auth.AuthenticationRequiredException,
                                     org.iana.rzm.facade.auth.UserInvalidatedException,
                                     org.iana.rzm.facade.common.NoObjectFoundException"/>
            <tx:method name="*"
                       rollback-for="org.iana.rzm.facade.auth.AccessDeniedException,
                                     org.iana.rzm.facade.auth.AuthenticationException,
                                     org.iana.rzm.facade.auth.AuthenticationFailedException,
                                     org.iana.rzm.facade.auth.AuthenticationRequiredException,
                                     org.iana.rzm.facade.auth.UserInvalidatedException,
                                     org.iana.rzm.facade.common.NoObjectFoundException"/>
        </tx:attributes>
    </tx:advice>

    <bean id="hibernateExceptionAdvisor"
          class="org.iana.rzm.facade.common.HibernateExceptionAdvisor">
        <property name="order" value="4"/>
    </bean>

</beans>
