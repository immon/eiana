<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="eiana-deploy" default="all.compile">

    <import file="eiana.xml"/>
    <import file="${basedir}/../eiana-web/module_eiana-web.xml"/>
    <import file="task-defs.xml"/>

    <property environment="env"/>

    <property name="lib.dir" location="../lib"/>
    <property name="conf.dir" location="../conf"/>
    <property name="output.dir" value="dist"/>
    <property name="jar.output.dir" value="${output.dir}/jar"/>
    <property name="war.output.dir" value="${output.dir}/war"/>
    <property name="config.dir" value="../conf"/>
    <property name="hibernate.dir" value="${config.dir}/hibernate"/>
    <property name="tests" value="../tests"/>
    <property name="test.report.output" location="${tests}/reports"/>
    <property name="test.cobertura.output" location="${tests}/cobertura_code_coverage"/>
    <property name="hibernate.test.dir" value="../tests/hibernate"/>
    <property name="dnscheck.output.dir" value="${output.dir}/dnscheck"/>

    <path id="cobertura.classpath">
        <fileset dir="${lib.dir}/cobertura">
            <include name="cobertura.jar"/>
            <include name="lib/**/*.jar"/>
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

    <!--creating database structure
     Before preforming "database.create" target, you have to create "eiana" database instance.
     To do create that instance you should execute these sql commands on your mysql database.
     You can use the standard mysql account "root" with empty password ("mysql -u root -p").

     CREATE DATABASE eiana;

    -->
    <target name="database.create"
            depends="all.jar">
        <hibernatetool destdir="${hibernate.dir}">
            <classpath>
                <path location="${eiana-domains.output.dir}"/>
                <path location="${eiana-util.output.dir}"/>
                <path location="${eiana-users.output.dir}"/>
                <path location="${eiana-trans.output.dir}"/>
                <path location="${eiana-logs.output.dir}"/>
                <path location="${eiana-notifications.output.dir}"/>
                <path location="${tests.testoutput.dir}"/>
                <path location="${common-objectdiff.output.dir}"/>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <annotationconfiguration
                    configurationfile="${hibernate.dir}/eiana-hibernate.cfg.xml">
            </annotationconfiguration>
            <hbm2ddl export="true" create="true" outputfilename="eiana-ddl.sql"/>
        </hibernatetool>
    </target>

    <target name="database.test.dropCreate" depends="all.compile">
        <sql
                driver="com.mysql.jdbc.Driver"
                url="jdbc:mysql://localhost/"
                userid="testng"
                password="1q2w3e">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <![CDATA[
                DROP DATABASE IF EXISTS eianatest;
                CREATE DATABASE IF NOT EXISTS eianatest;
            ]]>
        </sql>
    </target>

    <!--creating test database
     To create test database instance "eianatest", you have to execute these sql commands on your mysql database.
     You can use the standard mysql account "root" with empty password ("mysql -u root -p").

     CREATE DATABASE eianatest;
     GRANT ALL PRIVILEGES ON *.* TO 'testng'@'localhost' IDENTIFIED BY '1q2w3e' WITH GRANT OPTION;

     -->
    <target name="database.create.test"
            depends="all.jar, database.test.dropCreate">
        <hibernatetool destdir="${hibernate.test.dir}">
            <classpath>
                <fileset dir="${jar.output.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <annotationconfiguration
                    configurationfile="${hibernate.test.dir}/hibernate.cfg.xml">
            </annotationconfiguration>
            <hbm2ddl export="true" create="true" outputfilename="eiana-ddl.sql"/>
        </hibernatetool>
    </target>

    <!-- database initialization -->

    <path id="inittools.classpath">
        <fileset dir="${jar.output.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/apache-commons">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/nask-commons">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/jdom">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/mail">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/log4j">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/xerces">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/dom4j">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/testng">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/mysql">
            <include name="**/*.jar"/>
        </fileset>

        <fileset dir="${lib.dir}/rt">
            <include name="**/*.jar"/>
        </fileset>

        <fileset dir="${lib.dir}/epp">
            <include name="**/*.jar"/>
        </fileset>



        <path location="${eiana-init.output.dir}"/>
        <path refid="eiana-init.module.classpath"/>
    </path>

    <target name="database.init.test" depends="database.create.test, all.jar, jbpm.init, cc.init">
        <java classname="org.iana.rzm.init.ant.InitDatabaseTask">
            <classpath refid="inittools.classpath"/>
        </java>
    </target>

    <target name="database.init.root" depends="database.create.test, all.jar, jbpm.init, cc.init">
        <java classname="org.iana.rzm.init.ant.InitRootTask">
            <classpath refid="inittools.classpath"/>
        </java>
    </target>

    <target name="database.init.xml" depends=" all.jar, jbpm.init, cc.init">
        <java classname="org.iana.rzm.init.ant.InitDatabaseFromXMLTask">
            <classpath refid="inittools.classpath"/>
        </java>
    </target>

    <target name="cc.init" depends="all.jar">
        <java classname="org.iana.rzm.init.ant.InitCodeValues">
            <classpath refid="inittools.classpath"/>
        </java>
    </target>

    <target name="jbpm.init" depends="database.create.test, all.jar, replace.services">
        <java classname="org.iana.rzm.init.ant.ProcessDeployment">
            <arg value="domain-modification.xml"/>
            <classpath refid="inittools.classpath"/>
        </java>
    </target>

    <!-- compiling, packaging & testing targets-->

    <target name="all.compile"
            depends="init, compile.module.tests,compile.module.common-dns,compile.module.eiana-domains,
             compile.module.eiana-logs,compile.module.eiana-notifications,compile.module.eiana-trans,
             compile.module.eiana-users,compile.module.eiana-startup,compile.module.eiana-util,compile.module.facade-admin,
             compile.module.facade-common,compile.module.facade-system,compile.module.integration-rt,
             compile.module.integration-securid,compile.module.eiana-init,compile.module.common-objectdiff,
             compile.module.common-codevalues,compile.module.common-pgp, compile.module.common-test,
             compile.module.common-config, compile.module.eiana-web"
            description="build all"/>

    <target name="all.jar" depends="all.compile" description="makes jar archive to each module">
        <mkdir dir="${jar.output.dir}"/>

        <jar destfile="${jar.output.dir}/common-codevalues.jar">
            <fileset dir="${common-codevalues.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-config.jar">
            <fileset dir="${common-config.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-criteria.jar">
            <fileset dir="${common-criteria.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-dao.jar">
            <fileset dir="${common-dao.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-dns.jar">
            <fileset dir="${common-dns.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-mail.jar">
            <fileset dir="${common-mail.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-objectdiff.jar">
            <fileset dir="${common-objectdiff.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-pgp.jar">
            <fileset dir="${common-pgp.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/common-templates.jar">
            <fileset dir="${common-templates.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-domains.jar">
            <fileset dir="${eiana-domains.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-logs.jar">
            <fileset dir="${eiana-logs.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-mail.jar">
            <fileset dir="${eiana-notifications.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-notifications.jar">
            <fileset dir="${eiana-notifications.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-startup.jar">
            <fileset dir="${eiana-startup.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-trans.jar">
            <fileset dir="${eiana-trans.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-users.jar">
            <fileset dir="${eiana-users.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-util.jar">
            <fileset dir="${eiana-util.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/eiana-init.jar">
            <fileset dir="${eiana-init.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/facade-admin.jar">
            <fileset dir="${facade-admin.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/facade-common.jar">
            <fileset dir="${facade-common.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/facade-system.jar">
            <fileset dir="${facade-system.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/integration-rt.jar">
            <fileset dir="${integration-rt.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/integration-securid.jar">
            <fileset dir="${integration-securid.output.dir}"/>
        </jar>
        <jar destfile="${jar.output.dir}/config.jar">
            <fileset dir="${config.dir}/hibernate"/>
            <fileset dir="${config.dir}/spring"/>
            <fileset dir="${config.dir}/epp">
                <exclude name="test"/>
            </fileset>
        </jar>
    </target>

    <target name="all.war" depends="all.jar" description="makes war archive">
        <mkdir dir="${war.output.dir}"/>
        <war destfile="${war.output.dir}/eiana.war" webxml="${module.conf.basedir}/WEB-INF/web.xml">
            <lib dir="${jar.output.dir}" includes="*.jar"/>
            <lib dir="${lib.dir}" includes="**/*.jar" excludes="**/*javaee*.jar,**/*j2ee*.jar,**/*testng*.jar"/>
        </war>
    </target>

    <target name="war" depends="all.jar" description="makes war archive">
        <mkdir dir="${war.output.dir}"/>
        <antcall target="j2ee.build.jar.eiana-web">
            <param name="j2ee.path.jar" value="${war.output.dir}/rzm.war"/>
        </antcall>
    </target>


    <!-- runs all test from group that is equal to property value ${test.group}
    and excludes all tests from group that is equal toproperty value ${test.group.excluded}.
    You can put many groups into one property, separated by spaces or commas.
    Those properties could be set via IDEA IDE ("Ant build" tab) or from command line e.g. 'ant -Dtest.group="dao" '.
    Reports from tests are aviable in "Report" directory.
    -->

    <target name="coberturaInstrument" if="use.cobertura">
        <cobertura-instrument maxmemory="1024M">
            <fileset dir="${basedir}/classes">
                <include name="**/*.class"/>
                <exclude name="production/eiana-init/**/*.class"/>
                <exclude name="test/eiana-domains/org/iana/rzm/domain/hibernate/test/stress/**/*.class"/>
                <exclude name="test/eiana-trans/org/iana/rzm/trans/hibernate/test/**/*.class"/>
                <exclude name="test/eiana-users/org/iana/rzm/user/hibernate/test/stress/**/*.class"/>
                <exclude name="test/facade-system/org/iana/rzm/system/stress/**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="testngUseCobertura" if="use.cobertura">
        <testng classpathref="eiana.test-ng.classpath"
                outputDir="${test.report.output}"
                haltOnFailure="false" verbose="9" groups="${test.group}" excludedgroups="${test.group.excluded}">
            <classfileset dir="${basedir}/classes/test"/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser"/>
        </testng>

        <mkdir dir="${test.cobertura.output}"/>
        <delete>
            <fileset dir="${test.cobertura.output}">
                <include name="**/*"/>
            </fileset>
        </delete>
    </target>

    <target name="testngNoCobertura" if="no.cobertura">
        <testng classpathref="eiana.test-ng.classpath"
                outputDir="${test.report.output}"
                haltOnFailure="false" verbose="9" groups="${test.group}" excludedgroups="${test.group.excluded}">
            <classfileset dir="${basedir}/classes/test"/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser"/>
            <jvmarg value="-Xmx1g"/>
        </testng>

        <mkdir dir="${test.cobertura.output}"/>
        <delete>
            <fileset dir="${test.cobertura.output}">
                <include name="**/*"/>
            </fileset>
        </delete>
    </target>

    <target name="generateCoberturaReport" if="use.cobertura">
        <cobertura-report maxmemory="1024M" if="use.cobertura" format="html" datafile="${basedir}/cobertura.ser"
                          destdir="${test.cobertura.output}">
            <!--eiana-dns-->
            <fileset dir="../eiana-dns/src">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-domains-->
            <fileset dir="../eiana-domains/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-domains/test/conf">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-domains/test/dao">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-domains/test/hibernate">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-domains/test/failure">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-logs-->
            <fileset dir="../eiana-logs/src">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-notifications-->
            <fileset dir="../eiana-notifications/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-notifications/test/accuracy">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-trans-->
            <fileset dir="../eiana-trans/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/change">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/conf">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/confirmation">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/dao">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/hibernate">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/jbpm">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-trans/test/manager">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-users-->
            <fileset dir="../eiana-users/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-users/test/conf">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-users/test/dao">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-users/test/hibernate">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-util-->
            <fileset dir="../eiana-util/src">
                <include name="**/*.java"/>
            </fileset>
            <!--facade-admin-->
            <fileset dir="../facade-admin/src">
                <include name="**/*.java"/>
            </fileset>
            <!--facade-common-->
            <fileset dir="../facade-common/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../facade-common/test">
                <include name="**/*.java"/>
            </fileset>
            <!--facade-system-->
            <fileset dir="../facade-system/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../facade-system/test/bean">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../facade-system/test/conf">
                <include name="**/*.java"/>
            </fileset>
            <!--integration-rt-->
            <fileset dir="../integration-rt/src">
                <include name="**/*.java"/>
            </fileset>
            <!--integration-securid-->
            <fileset dir="../integration-securid/src">
                <include name="**/*.java"/>
            </fileset>
            <!--tests-->
            <fileset dir="../tests/test">
                <include name="**/*.java"/>
            </fileset>
            <!--common-mail-->
            <fileset dir="../common-mail/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../common-mail/test">
                <include name="**/*.java"/>
            </fileset>
            <!--eiana-mail-->
            <fileset dir="../eiana-mail/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../eiana-mail/test">
                <include name="**/*.java"/>
            </fileset>
            <!--common-pgp-->
            <fileset dir="../common-pgp/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../common-pgp/test">
                <include name="**/*.java"/>
            </fileset>
            <!--common-dns-->
            <fileset dir="../common-dns/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="../common-dns/test">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>
       
    <target name="replace.services">
        <delete file="${tests}/spring/services-test-config.xml" />
        <copy file="${conf.dir}/spring/services-config.xml" tofile="${tests}/spring/services-test-config.xml" />
        <replace file="${tests}/spring/services-test-config.xml">
            <replacetoken><![CDATA[<!-- beans to replace during tests -->]]></replacetoken>
            <replacevalue><![CDATA[<!-- beans to replace during tests]]></replacevalue>
        </replace>

        <replace file="${tests}/spring/services-test-config.xml">
            
            <replacetoken><![CDATA[<!-- end of test bean section -->]]></replacetoken>
            <replacevalue><![CDATA[end of test bean section -->
            <import resource="test-beans-config.xml" />]]></replacevalue>
        </replace>

        <replace file="${tests}/test/org/iana/rzm/conf/SpringApplicationContext.java">
            <replacetoken><![CDATA[file:../conf/spring/services-config.xml]]></replacetoken>
            <replacevalue><![CDATA[file:../tests/spring/services-test-config.xml]]></replacevalue>
        </replace>
    </target>

    <target name="all.test" depends="clean, replace.services, all.compile, database.test.dropCreate,database.create.test" description="runs all test from groups that is equal to property value (test.group)
     and excludes all tests from groups that is equal to property value (test.group.excluded).">

        <condition property="test.group.excluded" value="">
            <not>
                <isset property="test.group.excluded"/>
            </not>
        </condition>
        <condition property="test.group" value="">
            <not>
                <isset property="test.group"/>
            </not>
        </condition>

        <delete>
            <fileset dir="${basedir}">
                <include name="cobertura.ser"/>
            </fileset>
        </delete>

        <antcall target="coberturaInstrument"/>

        <mkdir dir="${test.report.output}"/>

        <echo>
            test inluded = ${test.group}
            test excluded = ${test.group.excluded}
        </echo>

        <path id="eiana.test-ng.classpath">
            <dirset dir="${basedir}/classes">
                <include name="test/*"/>
                <include name="production/*"/>
            </dirset>
            <fileset dir="${lib.dir}">
                <include name="**/*jar"/>
                <exclude name="cobertura/lib/asm-2.2.1.jar"/>
            </fileset>
        </path>

        <path id="eiana.test-ng.classpath">
            <dirset dir="${basedir}/classes">
                <include name="test/*"/>
                <include name="production/*"/>
            </dirset>
            <fileset dir="${lib.dir}">
                <include name="**/*jar"/>
                <exclude name="cobertura/lib/asm-2.2.1.jar"/>
            </fileset>
        </path>

        <antcall target="testngUseCobertura"/>
        <antcall target="testngNoCobertura"/>
        <antcall target="generateCoberturaReport"/>

    </target>

    <target name="all.test.fast" description="runs fast tests (excludes slow tests e.g. stress tests)">
        <property name="test.group.excluded" value="excluded, stress"/>
        <property name="no.cobertura" value="true"/>
        <antcall target="all.test"/>
    </target>

    <target name="all.test.fast.cobertura" description="runs fast tests (excludes slow tests e.g. stress tests)">
        <property name="test.group.excluded" value="excluded, stress"/>
        <property name="use.cobertura" value="true"/>
        <antcall target="all.test"/>
    </target>

    <target name="all.test.slow" description="runs slow tests (includes slow tests e.g. stress tests)
    WARNING: Those tests can take a lot of time.
    If you are using IDEA IDE to run this task, you should be preperd for fact that it can stop responding.">
        <property name="test.group.excluded" value="excluded"/>
        <antcall target="all.test"/>
    </target>

    <!--
        rpc technical check targets
    -->
    <path id="dnscheck.classpath">
        <fileset dir="${jar.output.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="dnscheck.clean" depends="clean">
        <mkdir dir="${dnscheck.output.dir}"/>
        <mkdir dir="${dnscheck.output.dir}/client"/>
        <mkdir dir="${war.output.dir}"/>
    </target>

    <target name="dnscheck.wscompile" depends="dnscheck.clean, all.jar">
        <wscompile
                define="true"
                features="documentliteral"
                base="${dnscheck.output.dir}"
                model="${dnscheck.output.dir}/model.xml.gz"
                config="${common-dns.output.dir}/org/iana/dns/check/remote/config.xml">
            <classpath refid="dnscheck.classpath"/>
        </wscompile>
    </target>

    <target name="dnscheck.war" depends="dnscheck.wscompile">
        <war destfile="${dnscheck.output.dir}/dnscheck-raw.war"
             webxml="${module.common-dns.basedir}/dsncheck/WEB-INF/web.xml">
            <classes dir="${common-dns.output.dir}">
                <include name="org/iana/dns/check/remote/*.class"/>
            </classes>
            <webinf dir="${module.common-dns.basedir}/dsncheck/WEB-INF"/>
            <webinf file="${dnscheck.output.dir}/model.xml.gz"/>
            <lib dir="${jar.output.dir}" includes="common-dns.jar"/>
            <lib dir="${lib.dir}/dnsjava" includes="dnsjava-2.0.3.jar"/>
            <lib dir="${lib.dir}/log4j" includes="log4j-1.2.14.jar"/>
        </war>
    </target>

    <!-- creates remote rpc technical check service war -->
    <target name="dnscheck.wsdeploy" depends="dnscheck.war">
        <wsdeploy
                inWarFile="${dnscheck.output.dir}/dnscheck-raw.war"
                outWarFile="${war.output.dir}/dnscheck.war">
            <classpath refid="wstools.classpath"/>
        </wsdeploy>
    </target>

    <target name="dnscheck.client.wscompile" depends="dnscheck.wscompile">
        <wscompile
                client="true"
                base="${dnscheck.output.dir}/client"
                config="${common-dns.output.dir}/org/iana/dns/check/remote/client/config.xml">
            <classpath refid="dnscheck.classpath"/>
        </wscompile>
    </target>

    <target name="dnscheck.client.jar" depends="dnscheck.client.wscompile">
        <jar destfile="${jar.output.dir}/dnscheck-client.jar">
            <fileset dir="${dnscheck.output.dir}/client"/>
        </jar>
    </target>

    <!-- creates and copies to libs client rpc technical check classes jar -->
    <target name="dnscheck.client.jar.copy" depends="dnscheck.client.jar">
        <copy file="${jar.output.dir}/dnscheck-client.jar" todir="${lib.dir}/dnscheck"/>
    </target>
</project>
